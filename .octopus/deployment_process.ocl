step "Approve (Production only)" {

    action {
        action_type = "Octopus.Manual"
        environments = ["Production"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Approve production deployment of x, y and z services."
            Octopus.Action.Manual.ResponsibleTeamIds = "Octopus Managers"
        }
        worker_pool_variable = ""
    }
}

step "Update database" {

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "aws.region"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "aws.account"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                echo "Updating database ..."
                
                # Connect to database
                
                # Execute sql script
                
                # Validate changes
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        packages "Phoenix.database" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "Phoenix.database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Update static assets" {

    action {
        action_type = "Octopus.AwsUploadS3"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{aws.region}"
            Octopus.Action.Aws.S3.BucketName = "#{aws.bucket}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"my/bucket/key\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[],\"variableSubstitutionPatterns\":\"**\\\\app.config\"}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "aws.account"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "Phoenix.StaticFiles"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool = "Hosted Ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "Phoenix.StaticFiles"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Deploy webapp to Amazon ECS" {
    package_requirement = "AfterPackageAcquisition"
    properties = {
        Octopus.Action.TargetRoles = "ecs"
    }

    action {
        action_type = "aws-ecs"
        step_package_version = "1.1.3"
        worker_pool_variable = ""

        packages "nginx" {
            acquisition_location = "NotAcquired"
            feed = "DockerHub"
            package_id = "nginx"
            step_package_inputs_reference_id = "f665e89c-b1ea-4eed-add7-bc47bdc87bee"
        }

        inputs {
            desiredCount = 1
            maximumHealthPercent = 200
            minimumHealthPercent = 100
            name = "#{Project.AWS.Task.Web.Name}"

            additionalTags {
                enableEcsManagedTags = false
            }

            containers {
                containerName = "phoenix"
                essential = true

                containerImageReference {
                    feedId = "DockerHub"
                    imageName = "nginx"
                    referenceId = "f665e89c-b1ea-4eed-add7-bc47bdc87bee"
                }

                containerLogging {
                    type = "auto"
                }

                containerPortMappings {
                    containerPort = 3000
                    protocol = "tcp"
                }

                containerPortMappings {
                    containerPort = 3001
                    protocol = "tcp"
                }

                containerStorage {
                    readOnlyRootFileSystem = false
                }

                healthCheck {
                }

                networkSettings {
                    disableNetworking = false
                }

                repositoryAuthentication {
                    type = "default"
                }
            }

            networkConfiguration {
                autoAssignPublicIp = true

                securityGroupIds {
                    id = "#{AWS.SecurityGroup.Id}"
                }

                subnetIds {
                    id = "#{AWS.Subnet1.Id}"
                }

                subnetIds {
                    id = "#{AWS.Subnet2.Id}"
                }
            }

            task {
                cpu = 512
                memory = 4096

                runtimePlatform {
                    cpuArchitecture = "X86_64"
                    operatingSystemFamily = "LINUX"
                }
            }

            waitOption {
                timeout = 30
                type = "waitWithTimeout"
            }
        }
    }
}